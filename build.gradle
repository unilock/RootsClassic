plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url "https://maven.blamejared.com/" }
	maven { url "https://maven.jamieswhiteshirt.com/libs-release/" }
	maven { url "https://maven.ladysnake.org/releases/" }
	maven { url "https://maven.parchmentmc.org/" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
	maven { url "https://mvn.devos.one/snapshots/" }
	maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
	mavenCentral()
	maven { url "https://jitpack.io" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	}

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${project.portinglib_version}")

	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")

	modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.configapi_version}"
	implementation "com.electronwill.night-config:core:${project.nightconfig_version}"
	implementation "com.electronwill.night-config:toml:${project.nightconfig_version}"

	modCompileOnlyApi "mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}"
	modCompileOnlyApi "mezz.jei:jei-${project.minecraft_version}-fabric-api:${project.jei_version}"

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"

	modCompileOnly "dev.emi:emi-fabric:${project.emi_version}:api"

	if (project.recipe_viewer == "jei") {
		modRuntimeOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}")
	}
	if (project.recipe_viewer == "rei") {
		modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
	}
	if (project.recipe_viewer = "emi") {
		modLocalRuntime("dev.emi:emi-fabric:${project.emi_version}")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

loom {
	accessWidenerPath = file("src/main/resources/rootsclassic.accessWidener")

	runs {
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}

	mods {
		"rootsclassic" {
			sourceSet("main")
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
				'src/main/generated'
			]
		}
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
